/*
 * Proximity API
 * Proximity API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.proximax.proximity.client.api;

import io.proximax.proximity.client.invoker.ApiCallback;
import io.proximax.proximity.client.invoker.ApiClient;
import io.proximax.proximity.client.invoker.ApiException;
import io.proximax.proximity.client.invoker.ApiResponse;
import io.proximax.proximity.client.invoker.Configuration;
import io.proximax.proximity.client.invoker.Pair;
import io.proximax.proximity.client.invoker.ProgressRequestBody;
import io.proximax.proximity.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.proximax.proximity.client.model.DashboardDTO;
import io.proximax.proximity.client.model.ErrorDTO;
import io.proximax.proximity.client.model.InlineResponse200;
import io.proximax.proximity.client.model.StatDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DriveApi {
    private ApiClient localVarApiClient;

    public DriveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DriveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for dashboardGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/dashboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = dashboardGetCall(_callback);
        return localVarCall;

    }

    /**
     * dashboard information
     * retrieve statistics for the account
     * @return DashboardDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DashboardDTO dashboardGet() throws ApiException {
        ApiResponse<DashboardDTO> localVarResp = dashboardGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * dashboard information
     * retrieve statistics for the account
     * @return ApiResponse&lt;DashboardDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardDTO> dashboardGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dashboardGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DashboardDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * dashboard information (asynchronously)
     * retrieve statistics for the account
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardGetAsync(final ApiCallback<DashboardDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DashboardDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveAdd
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveAddCall(String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (dst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dst", dst));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveAddValidateBeforeCall(String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dst' is set
        if (dst == null) {
            throw new ApiException("Missing the required parameter 'dst' when calling driveAdd(Async)");
        }
        

        okhttp3.Call localVarCall = driveAddCall(dst, cid, flush, _callback);
        return localVarCall;

    }

    /**
     * Add file
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 driveAdd(String dst, String cid, Boolean flush) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = driveAddWithHttpInfo(dst, cid, flush);
        return localVarResp.getData();
    }

    /**
     * Add file
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> driveAddWithHttpInfo(String dst, String cid, Boolean flush) throws ApiException {
        okhttp3.Call localVarCall = driveAddValidateBeforeCall(dst, cid, flush, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add file (asynchronously)
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveAddAsync(String dst, String cid, Boolean flush, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveAddValidateBeforeCall(dst, cid, flush, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveCp
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveCpCall(String src, String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/cp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (dst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dst", dst));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveCpValidateBeforeCall(String src, String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveCp(Async)");
        }
        
        // verify the required parameter 'dst' is set
        if (dst == null) {
            throw new ApiException("Missing the required parameter 'dst' when calling driveCp(Async)");
        }
        

        okhttp3.Call localVarCall = driveCpCall(src, dst, cid, flush, _callback);
        return localVarCall;

    }

    /**
     * Copy file
     * Copy copies file or directory from the givens source path to the given destination path It does not makes the full copy of the file or directory, it just copies the reference 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void driveCp(String src, String dst, String cid, Boolean flush) throws ApiException {
        driveCpWithHttpInfo(src, dst, cid, flush);
    }

    /**
     * Copy file
     * Copy copies file or directory from the givens source path to the given destination path It does not makes the full copy of the file or directory, it just copies the reference 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveCpWithHttpInfo(String src, String dst, String cid, Boolean flush) throws ApiException {
        okhttp3.Call localVarCall = driveCpValidateBeforeCall(src, dst, cid, flush, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copy file (asynchronously)
     * Copy copies file or directory from the givens source path to the given destination path It does not makes the full copy of the file or directory, it just copies the reference 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveCpAsync(String src, String dst, String cid, Boolean flush, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveCpValidateBeforeCall(src, dst, cid, flush, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveFlush
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFlushCall(String cid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/flush";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveFlushValidateBeforeCall(String cid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = driveFlushCall(cid, _callback);
        return localVarCall;

    }

    /**
     * Flush drive
     * Flush pushes state of the local Drive to all replicators
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void driveFlush(String cid) throws ApiException {
        driveFlushWithHttpInfo(cid);
    }

    /**
     * Flush drive
     * Flush pushes state of the local Drive to all replicators
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveFlushWithHttpInfo(String cid) throws ApiException {
        okhttp3.Call localVarCall = driveFlushValidateBeforeCall(cid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flush drive (asynchronously)
     * Flush pushes state of the local Drive to all replicators
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveFlushAsync(String cid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveFlushValidateBeforeCall(cid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveGet
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * -X-Stream-Output -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveGetCall(String src, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveGetValidateBeforeCall(String src, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveGet(Async)");
        }
        

        okhttp3.Call localVarCall = driveGetCall(src, cid, flush, _callback);
        return localVarCall;

    }

    /**
     * Get file
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * -X-Stream-Output -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public String driveGet(String src, String cid, Boolean flush) throws ApiException {
        ApiResponse<String> localVarResp = driveGetWithHttpInfo(src, cid, flush);
        return localVarResp.getData();
    }

    /**
     * Get file
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * -X-Stream-Output -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> driveGetWithHttpInfo(String src, String cid, Boolean flush) throws ApiException {
        okhttp3.Call localVarCall = driveGetValidateBeforeCall(src, cid, flush, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get file (asynchronously)
     * Sends file or directory to remote node which adds it to the path of the contract 
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * -X-Stream-Output -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveGetAsync(String src, String cid, Boolean flush, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveGetValidateBeforeCall(src, cid, flush, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveLs
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveLsCall(String src, String cid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/ls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveLsValidateBeforeCall(String src, String cid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveLs(Async)");
        }
        

        okhttp3.Call localVarCall = driveLsCall(src, cid, _callback);
        return localVarCall;

    }

    /**
     * List files
     * Ls returns information about the files and directories under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @return List&lt;StatDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<StatDTO> driveLs(String src, String cid) throws ApiException {
        ApiResponse<List<StatDTO>> localVarResp = driveLsWithHttpInfo(src, cid);
        return localVarResp.getData();
    }

    /**
     * List files
     * Ls returns information about the files and directories under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @return ApiResponse&lt;List&lt;StatDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StatDTO>> driveLsWithHttpInfo(String src, String cid) throws ApiException {
        okhttp3.Call localVarCall = driveLsValidateBeforeCall(src, cid, null);
        Type localVarReturnType = new TypeToken<List<StatDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List files (asynchronously)
     * Ls returns information about the files and directories under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveLsAsync(String src, String cid, final ApiCallback<List<StatDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveLsValidateBeforeCall(src, cid, _callback);
        Type localVarReturnType = new TypeToken<List<StatDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveMkdir
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveMkdirCall(String src, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/mkdir";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveMkdirValidateBeforeCall(String src, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveMkdir(Async)");
        }
        

        okhttp3.Call localVarCall = driveMkdirCall(src, cid, flush, _callback);
        return localVarCall;

    }

    /**
     * Make directory
     * MakeDir creates new directory on the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void driveMkdir(String src, String cid, Boolean flush) throws ApiException {
        driveMkdirWithHttpInfo(src, cid, flush);
    }

    /**
     * Make directory
     * MakeDir creates new directory on the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveMkdirWithHttpInfo(String src, String cid, Boolean flush) throws ApiException {
        okhttp3.Call localVarCall = driveMkdirValidateBeforeCall(src, cid, flush, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make directory (asynchronously)
     * MakeDir creates new directory on the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveMkdirAsync(String src, String cid, Boolean flush, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveMkdirValidateBeforeCall(src, cid, flush, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveMv
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveMvCall(String src, String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/mv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (dst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dst", dst));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveMvValidateBeforeCall(String src, String dst, String cid, Boolean flush, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveMv(Async)");
        }
        
        // verify the required parameter 'dst' is set
        if (dst == null) {
            throw new ApiException("Missing the required parameter 'dst' when calling driveMv(Async)");
        }
        

        okhttp3.Call localVarCall = driveMvCall(src, dst, cid, flush, _callback);
        return localVarCall;

    }

    /**
     * Move file
     * Move moves file or directory from the givens source path to the given destination path Use also to rename file or directory 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void driveMv(String src, String dst, String cid, Boolean flush) throws ApiException {
        driveMvWithHttpInfo(src, dst, cid, flush);
    }

    /**
     * Move file
     * Move moves file or directory from the givens source path to the given destination path Use also to rename file or directory 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveMvWithHttpInfo(String src, String dst, String cid, Boolean flush) throws ApiException {
        okhttp3.Call localVarCall = driveMvValidateBeforeCall(src, dst, cid, flush, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Move file (asynchronously)
     * Move moves file or directory from the givens source path to the given destination path Use also to rename file or directory 
     * @param src The source path of the file in Drive. (required)
     * @param dst The destination path. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveMvAsync(String src, String dst, String cid, Boolean flush, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveMvValidateBeforeCall(src, dst, cid, flush, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveRm
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param local Delete file from local disk only, but keep reference on it remotely (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveRmCall(String src, String cid, Boolean flush, Boolean local, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/rm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveRmValidateBeforeCall(String src, String cid, Boolean flush, Boolean local, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveRm(Async)");
        }
        

        okhttp3.Call localVarCall = driveRmCall(src, cid, flush, local, _callback);
        return localVarCall;

    }

    /**
     * Remove file
     * Remove removes the file or directory from the path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param local Delete file from local disk only, but keep reference on it remotely (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void driveRm(String src, String cid, Boolean flush, Boolean local) throws ApiException {
        driveRmWithHttpInfo(src, cid, flush, local);
    }

    /**
     * Remove file
     * Remove removes the file or directory from the path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param local Delete file from local disk only, but keep reference on it remotely (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> driveRmWithHttpInfo(String src, String cid, Boolean flush, Boolean local) throws ApiException {
        okhttp3.Call localVarCall = driveRmValidateBeforeCall(src, cid, flush, local, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove file (asynchronously)
     * Remove removes the file or directory from the path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param flush To immediately send data to replicators (optional, default to false)
     * @param local Delete file from local disk only, but keep reference on it remotely (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveRmAsync(String src, String cid, Boolean flush, Boolean local, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveRmValidateBeforeCall(src, cid, flush, local, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for driveStat
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveStatCall(String src, String cid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drive/stat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driveStatValidateBeforeCall(String src, String cid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'src' is set
        if (src == null) {
            throw new ApiException("Missing the required parameter 'src' when calling driveStat(Async)");
        }
        

        okhttp3.Call localVarCall = driveStatCall(src, cid, _callback);
        return localVarCall;

    }

    /**
     * File information
     * Stat returns information about the file or directory under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @return StatDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public StatDTO driveStat(String src, String cid) throws ApiException {
        ApiResponse<StatDTO> localVarResp = driveStatWithHttpInfo(src, cid);
        return localVarResp.getData();
    }

    /**
     * File information
     * Stat returns information about the file or directory under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @return ApiResponse&lt;StatDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatDTO> driveStatWithHttpInfo(String src, String cid) throws ApiException {
        okhttp3.Call localVarCall = driveStatValidateBeforeCall(src, cid, null);
        Type localVarReturnType = new TypeToken<StatDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * File information (asynchronously)
     * Stat returns information about the file or directory under the given path
     * @param src The source path of the file in Drive. (required)
     * @param cid [Cid](https://github.com/multiformats/cid) (version 1) - special content identifier. May represent data or Drive.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driveStatAsync(String src, String cid, final ApiCallback<StatDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = driveStatValidateBeforeCall(src, cid, _callback);
        Type localVarReturnType = new TypeToken<StatDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
