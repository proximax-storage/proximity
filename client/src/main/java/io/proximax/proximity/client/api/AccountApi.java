/*
 * Proximity API
 * Proximity API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.proximax.proximity.client.api;

import io.proximax.proximity.client.invoker.ApiCallback;
import io.proximax.proximity.client.invoker.ApiClient;
import io.proximax.proximity.client.invoker.ApiException;
import io.proximax.proximity.client.invoker.ApiResponse;
import io.proximax.proximity.client.invoker.Configuration;
import io.proximax.proximity.client.invoker.Pair;
import io.proximax.proximity.client.invoker.ProgressRequestBody;
import io.proximax.proximity.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.proximax.proximity.client.model.AccountInfoDTO;
import io.proximax.proximity.client.model.AccountLoginDTO;
import io.proximax.proximity.client.model.AccountRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accountGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get account information
     * retrieve account info for current session
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO accountGet() throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = accountGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get account information
     * retrieve account info for current session
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> accountGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account information (asynchronously)
     * retrieve account info for current session
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountLogin
     * @param accountLoginDTO Login info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoginCall(AccountLoginDTO accountLoginDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountLoginDTO;

        // create path and map variables
        String localVarPath = "/account/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountLoginValidateBeforeCall(AccountLoginDTO accountLoginDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountLoginDTO' is set
        if (accountLoginDTO == null) {
            throw new ApiException("Missing the required parameter 'accountLoginDTO' when calling accountLogin(Async)");
        }
        

        okhttp3.Call localVarCall = accountLoginCall(accountLoginDTO, _callback);
        return localVarCall;

    }

    /**
     * Login user
     * Login user using his credentials
     * @param accountLoginDTO Login info (required)
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO accountLogin(AccountLoginDTO accountLoginDTO) throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = accountLoginWithHttpInfo(accountLoginDTO);
        return localVarResp.getData();
    }

    /**
     * Login user
     * Login user using his credentials
     * @param accountLoginDTO Login info (required)
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> accountLoginWithHttpInfo(AccountLoginDTO accountLoginDTO) throws ApiException {
        okhttp3.Call localVarCall = accountLoginValidateBeforeCall(accountLoginDTO, null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login user (asynchronously)
     * Login user using his credentials
     * @param accountLoginDTO Login info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountLoginAsync(AccountLoginDTO accountLoginDTO, final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountLoginValidateBeforeCall(accountLoginDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountRegister
     * @param accountRequestDTO Registration info (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRegisterCall(AccountRequestDTO accountRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountRequestDTO;

        // create path and map variables
        String localVarPath = "/account/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountRegisterValidateBeforeCall(AccountRequestDTO accountRequestDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountRequestDTO' is set
        if (accountRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'accountRequestDTO' when calling accountRegister(Async)");
        }
        

        okhttp3.Call localVarCall = accountRegisterCall(accountRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Register new account
     * Register new account based on provided information
     * @param accountRequestDTO Registration info (required)
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO accountRegister(AccountRequestDTO accountRequestDTO) throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = accountRegisterWithHttpInfo(accountRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Register new account
     * Register new account based on provided information
     * @param accountRequestDTO Registration info (required)
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> accountRegisterWithHttpInfo(AccountRequestDTO accountRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = accountRegisterValidateBeforeCall(accountRequestDTO, null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register new account (asynchronously)
     * Register new account based on provided information
     * @param accountRequestDTO Registration info (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRegisterAsync(AccountRequestDTO accountRequestDTO, final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountRegisterValidateBeforeCall(accountRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTokensCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountTokensCall(_callback);
        return localVarCall;

    }

    /**
     * Get account tokens
     * Developer API to retrieve valid tokens for all supported operations. Remove or very tightly secure this
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO accountTokens() throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = accountTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get account tokens
     * Developer API to retrieve valid tokens for all supported operations. Remove or very tightly secure this
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> accountTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account tokens (asynchronously)
     * Developer API to retrieve valid tokens for all supported operations. Remove or very tightly secure this
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTokensAsync(final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountValidate
     * @param emailToken Email validation token sent via e-mail (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountValidateCall(String emailToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (emailToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailToken", emailToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountValidateValidateBeforeCall(String emailToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accountValidateCall(emailToken, _callback);
        return localVarCall;

    }

    /**
     * Validate account
     * Validate account information
     * @param emailToken Email validation token sent via e-mail (optional)
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO accountValidate(String emailToken) throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = accountValidateWithHttpInfo(emailToken);
        return localVarResp.getData();
    }

    /**
     * Validate account
     * Validate account information
     * @param emailToken Email validation token sent via e-mail (optional)
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> accountValidateWithHttpInfo(String emailToken) throws ApiException {
        okhttp3.Call localVarCall = accountValidateValidateBeforeCall(emailToken, null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate account (asynchronously)
     * Validate account information
     * @param emailToken Email validation token sent via e-mail (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountValidateAsync(String emailToken, final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountValidateValidateBeforeCall(emailToken, _callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
